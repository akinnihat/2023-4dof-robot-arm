# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arm_custom_interfaces/ArmJointState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ArmJointState(genpy.Message):
  _md5sum = "1e666d4870913f5d3bf914fa28fa41a7"
  _type = "arm_custom_interfaces/ArmJointState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 position_d1
float64 position_d2
float64 position_d3
float64 position_d4
bool is_gripper_active"""
  __slots__ = ['position_d1','position_d2','position_d3','position_d4','is_gripper_active']
  _slot_types = ['float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_d1,position_d2,position_d3,position_d4,is_gripper_active

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmJointState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position_d1 is None:
        self.position_d1 = 0.
      if self.position_d2 is None:
        self.position_d2 = 0.
      if self.position_d3 is None:
        self.position_d3 = 0.
      if self.position_d4 is None:
        self.position_d4 = 0.
      if self.is_gripper_active is None:
        self.is_gripper_active = False
    else:
      self.position_d1 = 0.
      self.position_d2 = 0.
      self.position_d3 = 0.
      self.position_d4 = 0.
      self.is_gripper_active = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4dB().pack(_x.position_d1, _x.position_d2, _x.position_d3, _x.position_d4, _x.is_gripper_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.position_d1, _x.position_d2, _x.position_d3, _x.position_d4, _x.is_gripper_active,) = _get_struct_4dB().unpack(str[start:end])
      self.is_gripper_active = bool(self.is_gripper_active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4dB().pack(_x.position_d1, _x.position_d2, _x.position_d3, _x.position_d4, _x.is_gripper_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.position_d1, _x.position_d2, _x.position_d3, _x.position_d4, _x.is_gripper_active,) = _get_struct_4dB().unpack(str[start:end])
      self.is_gripper_active = bool(self.is_gripper_active)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dB = None
def _get_struct_4dB():
    global _struct_4dB
    if _struct_4dB is None:
        _struct_4dB = struct.Struct("<4dB")
    return _struct_4dB
